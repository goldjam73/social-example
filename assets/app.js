angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(o,n){t.currentUser=n}),t.logout=function(){}}]),angular.module("app").controller("LoginCtrl",["$scope","$location","UserSvc",function(t,o,n){t.login=function(e,s){n.login(e,s).then(function(n){t.$emit("login",n.data),o.path("/")})}}]),function(){"use strict";function t(){var t=this;t.addPost=function(){null!==t.postBody&&t.onUpdate({value:t.postBody})}}angular.module("app").component("postInput",{controller:t,templateUrl:"postinput.html",bindings:{postBody:"<",onUpdate:"&"}})}(),function(){"use strict";angular.module("app").component("postItem",{templateUrl:"postitem.html",bindings:{post:"<"}})}(),function(){"use strict";function t(t,o){var n=this;n.postBody=null,n.addPost=function(t){o.create({body:t}).then(function(){n.postBody=null})},o.fetch().then(function(t){n.posts=t.data})}t.$inject=["$scope","PostsSvc"],angular.module("app").component("posts",{controller:t,templateUrl:"posts.html"})}(),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(o){return t.post("/api/posts",o)}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{template:"<posts></posts>"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var o=this;o.getUser=function(){return t.get("/api/users")},o.login=function(n,e){return t.post("/api/sessions",{username:n,password:e}).then(function(n){return o.token=n.data,t.defaults.headers.common["X-Auth"]=n.data,o.getUser()})}}]),angular.module("app").run(["$rootScope","$timeout",function(t,o){function n(){return"https:"===window.location.host?"wss://"+window.location.host:"ws://"+window.location.host}!function e(){var s=new WebSocket(n());s.onclose=function(){console.log("WebSocket closed. Reconnecting..."),o(e,1e4)},s.onmessage=function(o){var n=JSON.parse(o.data);t.$broadcast("ws:"+n.topic,n.data)}}()}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
