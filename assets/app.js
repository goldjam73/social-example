angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(o){o.$on("login",function(t,n){o.currentUser=n}),o.logout=function(){}}]),angular.module("app").controller("LoginCtrl",["$scope","$location","UserSvc",function(o,t,n){o.login=function(e,s){n.login(e,s).then(function(n){o.$emit("login",n.data),t.path("/")})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(o,t){o.postBody=null,o.addPost=function(){null!==o.postBody&&t.create({body:o.postBody}).success(function(t){o.postBody=null})},o.$on("ws:new_post",function(t,n){o.$apply(function(){o.posts.unshift(n)})}),t.fetch().success(function(t){o.posts=t})}]),angular.module("app").service("PostsSvc",["$http",function(o){this.fetch=function(){return o.get("/api/posts")},this.create=function(t){return o.post("/api/posts",t)}}]),angular.module("app").config(["$routeProvider",function(o){o.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(o){var t=this;t.getUser=function(){return o.get("/api/users")},t.login=function(n,e){return o.post("/api/sessions",{username:n,password:e}).then(function(n){return t.token=n.data,o.defaults.headers.common["X-Auth"]=n.data,t.getUser()})}}]),angular.module("app").run(["$rootScope","$timeout",function(o,t){function n(){return"https:"===window.location.host?"wss://"+window.location.host:"ws://"+window.location.host}!function e(){var s=new WebSocket(n());s.onclose=function(){console.log("WebSocket closed. Reconnecting..."),t(e,1e4)},s.onmessage=function(t){var n=JSON.parse(t.data);o.$broadcast("ws:"+n.topic,n.data)}}()}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9uZy9hcHAuanMiLCIvbmcvYXBwLmpzIiwiL25nL2FwcC5qcyIsIi9uZy9hcHAuanMiLCIvbmcvYXBwLmpzIiwiL25nL2FwcC5qcyIsIi9uZy9hcHAuanMiLCIvbmcvYXBwLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJG9uIiwiXyIsInVzZXIiLCJjdXJyZW50VXNlciIsImxvZ291dCIsIiRsb2NhdGlvbiIsIlVzZXJTdmMiLCJsb2dpbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ0aGVuIiwicmVzcG9uc2UiLCIkZW1pdCIsImRhdGEiLCJwYXRoIiwiUG9zdHNTdmMiLCJwb3N0Qm9keSIsImFkZFBvc3QiLCJjcmVhdGUiLCJib2R5Iiwic3VjY2VzcyIsInBvc3QiLCIkYXBwbHkiLCJwb3N0cyIsInVuc2hpZnQiLCJmZXRjaCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsInN2YyIsImdldFVzZXIiLCJ2YWwiLCJ0b2tlbiIsImRlZmF1bHRzIiwiaGVhZGVycyIsImNvbW1vbiIsInJ1biIsIiRyb290U2NvcGUiLCIkdGltZW91dCIsIndlYlNvY2tldEhvc3QiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhvc3QiLCJjb25uZWN0IiwiY29ubmVjdGlvbiIsIldlYlNvY2tldCIsIm9uY2xvc2UiLCJjb25zb2xlIiwibG9nIiwib25tZXNzYWdlIiwiZSIsInBheWxvYWQiLCJKU09OIiwicGFyc2UiLCIkYnJvYWRjYXN0IiwidG9waWMiXSwibWFwcGluZ3MiOiJBQUFBQSxRQUFBQyxPQUFBLE9BQ0EsWUNEQUQsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLG1CQUFBLFNBQUEsU0FBQUMsR0FDQUEsRUFBQUMsSUFBQSxRQUFBLFNBQUFDLEVBQUFDLEdBQ0FILEVBQUFJLFlBQUFELElBRUFILEVBQUFLLE9BQUEsZ0JDTEFSLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxhQUFBLFNBQUEsWUFBQSxVQUFBLFNBQUFDLEVBQUFNLEVBQUFDLEdBQ0FQLEVBQUFRLE1BQUEsU0FBQUMsRUFBQUMsR0FDQUgsRUFBQUMsTUFBQUMsRUFBQUMsR0FDQUMsS0FBQSxTQUFBQyxHQUNBWixFQUFBYSxNQUFBLFFBQUFELEVBQUFFLE1BQ0FSLEVBQUFTLEtBQUEsV0NOQWxCLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxpQ0FDQSxTQUFBQyxFQUFBZ0IsR0FDQWhCLEVBQUFpQixTQUFBLEtBRUFqQixFQUFBa0IsUUFBQSxXQUNBLE9BQUFsQixFQUFBaUIsVUFDQUQsRUFBQUcsUUFDQUMsS0FBQXBCLEVBQUFpQixXQUNBSSxRQUFBLFNBQUFDLEdBRUF0QixFQUFBaUIsU0FBQSxRQUtBakIsRUFBQUMsSUFBQSxjQUFBLFNBQUFDLEVBQUFvQixHQUNBdEIsRUFBQXVCLE9BQUEsV0FDQXZCLEVBQUF3QixNQUFBQyxRQUFBSCxPQUlBTixFQUFBVSxRQUNBTCxRQUFBLFNBQUFHLEdBQ0F4QixFQUFBd0IsTUFBQUEsT0N4QkEzQixRQUFBQyxPQUFBLE9BQ0E2QixRQUFBLG9CQUNBLFNBQUFDLEdBQ0FDLEtBQUFILE1BQUEsV0FDQSxNQUFBRSxHQUFBRSxJQUFBLGVBRUFELEtBQUFWLE9BQUEsU0FBQUcsR0FDQSxNQUFBTSxHQUFBTixLQUFBLGFBQUFBLE9DUEF6QixRQUFBQyxPQUFBLE9BQ0FpQyxRQUFBLGlCQUFBLFNBQUFDLEdBQ0FBLEVBQ0FDLEtBQUEsS0FDQWxDLFdBQUEsWUFDQW1DLFlBQUEsZUFFQUQsS0FBQSxhQUNBbEMsV0FBQSxlQUNBbUMsWUFBQSxrQkFFQUQsS0FBQSxVQUNBbEMsV0FBQSxZQUNBbUMsWUFBQSxrQkNiQXJDLFFBQUFDLE9BQUEsT0FDQTZCLFFBQUEsV0FBQSxRQUFBLFNBQUFDLEdBQ0EsR0FBQU8sR0FBQU4sSUFDQU0sR0FBQUMsUUFBQSxXQUNBLE1BQUFSLEdBQUFFLElBQUEsZUFFQUssRUFBQTNCLE1BQUEsU0FBQUMsRUFBQUMsR0FDQSxNQUFBa0IsR0FBQU4sS0FBQSxpQkFDQWIsU0FBQUEsRUFDQUMsU0FBQUEsSUFDQUMsS0FBQSxTQUFBMEIsR0FHQSxNQUZBRixHQUFBRyxNQUFBRCxFQUFBdkIsS0FDQWMsRUFBQVcsU0FBQUMsUUFBQUMsT0FBQSxVQUFBSixFQUFBdkIsS0FDQXFCLEVBQUFDLGdCQ2JBdkMsUUFBQUMsT0FBQSxPQUNBNEMsS0FBQSxhQUFBLFdBQUEsU0FBQUMsRUFBQUMsR0FDQSxRQUFBQyxLQUNBLE1BQUEsV0FBQUMsT0FBQUMsU0FBQUMsS0FDQSxTQUFBRixPQUFBQyxTQUFBQyxLQUVBLFFBQUFGLE9BQUFDLFNBQUFDLE1BR0EsUUFBQUMsS0FDQSxHQUFBQyxHQUFBLEdBQUFDLFdBQUFOLElBQ0FLLEdBQUFFLFFBQUEsV0FDQUMsUUFBQUMsSUFBQSxxQ0FDQVYsRUFBQUssRUFBQSxNQUVBQyxFQUFBSyxVQUFBLFNBQUFDLEdBQ0EsR0FBQUMsR0FBQUMsS0FBQUMsTUFBQUgsRUFBQTFDLEtBQ0E2QixHQUFBaUIsV0FBQSxNQUFBSCxFQUFBSSxNQUFBSixFQUFBM0MiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtcclxuXHQnbmdSb3V0ZSdcclxuXSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUpe1xyXG5cdCRzY29wZS4kb24oJ2xvZ2luJywgZnVuY3Rpb24oXywgdXNlcil7XHJcblx0XHQkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xyXG5cdH0pO1xyXG5cdCRzY29wZS5sb2dvdXQgPSBmdW5jdGlvbigpe1xyXG5cdFx0Ly9cclxuXHR9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuXHQuY29udHJvbGxlcignTG9naW5DdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkbG9jYXRpb24sIFVzZXJTdmMpIHtcclxuXHRcdCRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCkge1xyXG5cdFx0XHRVc2VyU3ZjLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZClcclxuXHRcdFx0XHQudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG5cdFx0XHRcdFx0JHNjb3BlLiRlbWl0KCdsb2dpbicsIHJlc3BvbnNlLmRhdGEpO1xyXG5cdFx0XHRcdFx0JGxvY2F0aW9uLnBhdGgoJy8nKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdH07XHJcblx0fSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcblx0LmNvbnRyb2xsZXIoJ1Bvc3RzQ3RybCcsXHJcblx0XHRmdW5jdGlvbigkc2NvcGUsIFBvc3RzU3ZjKSB7XHJcblx0XHRcdCRzY29wZS5wb3N0Qm9keSA9IG51bGw7XHJcblxyXG5cdFx0XHQkc2NvcGUuYWRkUG9zdCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICgkc2NvcGUucG9zdEJvZHkgIT09IG51bGwpIHtcclxuXHRcdFx0XHRcdFBvc3RzU3ZjLmNyZWF0ZSh7XHJcblx0XHRcdFx0XHRcdGJvZHk6ICRzY29wZS5wb3N0Qm9keVxyXG5cdFx0XHRcdFx0fSkuc3VjY2VzcyhmdW5jdGlvbihwb3N0KSB7XHJcblx0XHRcdFx0XHRcdC8vJHNjb3BlLnBvc3RzLnVuc2hpZnQocG9zdCk7XHJcblx0XHRcdFx0XHRcdCRzY29wZS5wb3N0Qm9keSA9IG51bGw7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHQkc2NvcGUuJG9uKCd3czpuZXdfcG9zdCcsIGZ1bmN0aW9uKF8sIHBvc3Qpe1xyXG5cdFx0XHRcdCRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHQkc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRQb3N0c1N2Yy5mZXRjaCgpXHJcblx0XHRcdFx0LnN1Y2Nlc3MoZnVuY3Rpb24ocG9zdHMpIHtcclxuXHRcdFx0XHRcdCRzY29wZS5wb3N0cyA9IHBvc3RzO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdCk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcblx0LnNlcnZpY2UoJ1Bvc3RzU3ZjJyxcclxuXHRcdGZ1bmN0aW9uKCRodHRwKSB7XHJcblx0XHRcdHRoaXMuZmV0Y2ggPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJyk7XHJcblx0XHRcdH07XHJcblx0XHRcdHRoaXMuY3JlYXRlID0gZnVuY3Rpb24ocG9zdCkge1xyXG5cdFx0XHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Bvc3RzJywgcG9zdCk7XHJcblx0XHRcdH07XHJcblx0XHR9XHJcblx0KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuXHQuY29uZmlnKGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyKSB7XHJcblx0XHQkcm91dGVQcm92aWRlclxyXG5cdFx0XHQud2hlbignLycsIHtcclxuXHRcdFx0XHRjb250cm9sbGVyOiAnUG9zdHNDdHJsJyxcclxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3Bvc3RzLmh0bWwnXHJcblx0XHRcdH0pXHJcblx0XHRcdC53aGVuKCcvcmVnaXN0ZXInLCB7XHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ1JlZ2lzdGVyQ3RybCcsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICdyZWdpc3Rlci5odG1sJ1xyXG5cdFx0XHR9KVxyXG5cdFx0XHQud2hlbignL2xvZ2luJywge1xyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdMb2dpbkN0cmwnLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAnbG9naW4uaHRtbCdcclxuXHRcdFx0fSk7XHJcblx0fSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcblx0LnNlcnZpY2UoJ1VzZXJTdmMnLCBmdW5jdGlvbigkaHR0cCkge1xyXG5cdFx0dmFyIHN2YyA9IHRoaXM7XHJcblx0XHRzdmMuZ2V0VXNlciA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJyk7XHJcblx0XHR9O1xyXG5cdFx0c3ZjLmxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKSB7XHJcblx0XHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zJywge1xyXG5cdFx0XHRcdHVzZXJuYW1lOiB1c2VybmFtZSxcclxuXHRcdFx0XHRwYXNzd29yZDogcGFzc3dvcmRcclxuXHRcdFx0fSkudGhlbihmdW5jdGlvbih2YWwpIHtcclxuXHRcdFx0XHRzdmMudG9rZW4gPSB2YWwuZGF0YTtcclxuXHRcdFx0XHQkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSB2YWwuZGF0YTtcclxuXHRcdFx0XHRyZXR1cm4gc3ZjLmdldFVzZXIoKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9O1xyXG5cdH0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG5cdC5ydW4oZnVuY3Rpb24oJHJvb3RTY29wZSwgJHRpbWVvdXQpIHtcclxuXHRcdGZ1bmN0aW9uIHdlYlNvY2tldEhvc3QoKSB7XHJcblx0XHRcdGlmICh3aW5kb3cubG9jYXRpb24uaG9zdCA9PT0gXCJodHRwczpcIil7XHJcblx0XHRcdFx0cmV0dXJuIFwid3NzOi8vXCIgKyB3aW5kb3cubG9jYXRpb24uaG9zdDtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZXR1cm4gXCJ3czovL1wiICsgd2luZG93LmxvY2F0aW9uLmhvc3Q7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdChmdW5jdGlvbiBjb25uZWN0KCkge1xyXG5cdFx0XHR2YXIgY29ubmVjdGlvbiA9IG5ldyBXZWJTb2NrZXQod2ViU29ja2V0SG9zdCgpKTtcclxuXHRcdFx0Y29ubmVjdGlvbi5vbmNsb3NlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coJ1dlYlNvY2tldCBjbG9zZWQuIFJlY29ubmVjdGluZy4uLicpO1xyXG5cdFx0XHRcdCR0aW1lb3V0KGNvbm5lY3QsIDEwICogMTAwMCk7XHJcblx0XHRcdH07XHJcblx0XHRcdGNvbm5lY3Rpb24ub25tZXNzYWdlID0gZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdHZhciBwYXlsb2FkID0gSlNPTi5wYXJzZShlLmRhdGEpO1xyXG5cdFx0XHRcdCRyb290U2NvcGUuJGJyb2FkY2FzdCgnd3M6JyArIHBheWxvYWQudG9waWMsIHBheWxvYWQuZGF0YSk7XHJcblx0XHRcdH07XHJcblx0XHR9KSgpO1xyXG5cdH0pOyJdfQ==
